# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

env:
  # docker push 명령어를 사용할 경우 login이 필요. 이를 구분하고 필요시에만 로그인하도록 보안성 측면의 설정
  IS_PUSH: ${{ github.event_name != 'pull_request' }}

on:
  push:
    branches: [ "feature/member" ]
  pull_request:
    branches: [ "feature/member" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'

    # 설정파일 추가
    - name: Set YML
      run: |
        echo "copy yml"
        echo "${{ secrets.BOOTSTRAP_MEMBER }}" | base64 --decode > ./member/src/main/resources/bootstrap.yml
        cat ./member/src/main/resources/bootstrap.yml

    # gradle 권한 부여
    - name: Grant execute permission form gradlew
      run: |
        cd member/
        chmod +x gradlew
    
    # build with gradle
    - name: Build with Gradle member
      run: |
        cd member/
        ./gradlew clean build -x test

    # - name: Login to DockerHub
    #   if: ${{ env.IS_PUSH }}
    #   uses: docker/login-action@v1
    #   with:
    #     username: ${{ secrets.DOCKER_USERNAME_LEE }}
    #     password: ${{ secrets.DOCKER_PASSWORD_LEE }}
    
    # - uses: actions/checkout@v3
    
    # Docker build and push
    - name: Build Docker image
      run: |
        docker login -u ${{ secrets.DOCKER_USERNAME_LEE }} -p ${{ secrets.DOCKER_PASSWORD_LEE }}
        cd member/
        docker build --tag ${{ secrets.DOCKER_USERNAME_LEE }}/member-service:1.0 .
        
    - name: Push Docker image
      run: docker push ${{ secrets.DOCKER_USERNAME_LEE }}/member-service:1.0

    - name: Docker logout
      run: docker logout

    # deploy
    - name: executing remote ssh commands using password
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.KEY }}
        script: |
          sudo docker stop member-service
          sudo docker rm member-service
          sudo docker rmi -f ${{ secrets.DOCKER_USERNAME_LEE }}/member-service:1.0
          sudo docker pull ${{ secrets.DOCKER_USERNAME_LEE }}/member-service:1.0
          sudo docker run -d --network nuguri-network -e "spring.config.import=optional:configserver:http://config-service:8888" -e "eureka.client.serviceUrl.defaultZone=http://discovery-service:8761/eureka/" -e "spring.redis.host=redis" --name member-service ${{ secrets.DOCKER_USERNAME_LEE }}/member-service:1.0
      
